

lexeme: class Program
token: CHAR
type: char_literal
line_num: 1

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 1

lexeme: void
token: CHAR
type: char_literal
line_num: 3

lexeme: main
token: CHAR
type: char_literal
line_num: 3

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 3

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 3

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 3

lexeme: int
token: CHAR
type: char_literal
line_num: 4

lexeme: i
token: CHAR
type: char_literal
line_num: 4

lexeme: ,
token: STRING
type: string_literal
line_num: 4

lexeme: sum
token: CHAR
type: char_literal
line_num: 4

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 4

lexeme: int
token: CHAR
type: char_literal
line_num: 5

lexeme: j
token: CHAR
type: char_literal
line_num: 5

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 5

lexeme: 	
token: STRING
type: string_literal
line_num: 6

lexeme: sum
token: CHAR
type: char_literal
line_num: 6

lexeme: =
token: EQUALS
type: assign_op
line_num: 6

lexeme: 0
token: 0
type: decimal_literal
line_num: 6

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 6

lexeme: for
token: CHAR
type: char_literal
line_num: 8

lexeme: j
token: CHAR
type: char_literal
line_num: 8

lexeme: =
token: EQUALS
type: assign_op
line_num: 8

lexeme: 0
token: 0
type: decimal_literal
line_num: 8

lexeme: ,
token: STRING
type: string_literal
line_num: 8

lexeme: 10
token: 10
type: decimal_literal
line_num: 8

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 8

lexeme: sum
token: CHAR
type: char_literal
line_num: 9

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 9

lexeme: j
token: CHAR
type: char_literal
line_num: 9

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 9

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 10

lexeme: if
token: CHAR
type: char_literal
line_num: 12

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 12

lexeme: sum
token: CHAR
type: char_literal
line_num: 12

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 12

lexeme: 45
token: 45
type: decimal_literal
line_num: 12

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 12

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 12

lexeme: callout
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: printf
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ,
token: STRING
type: string_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 13

lexeme: for
token: CHAR
type: char_literal
line_num: 13

lexeme: loop
token: CHAR
type: char_literal
line_num: 13

lexeme: is
token: CHAR
type: char_literal
line_num: 13

lexeme: bad
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: 1
token: 1
type: decimal_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: \
token: STRING
type: string_literal
line_num: 13

lexeme: n
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 13

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 14

lexeme: i
token: CHAR
type: char_literal
line_num: 16

lexeme: =
token: EQUALS
type: assign_op
line_num: 16

lexeme: 0x1a1
token: 417
type: hex_literal
line_num: 16

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 16

lexeme: for
token: CHAR
type: char_literal
line_num: 17

lexeme: j
token: CHAR
type: char_literal
line_num: 17

lexeme: =
token: EQUALS
type: assign_op
line_num: 17

lexeme: 10
token: 10
type: decimal_literal
line_num: 17

lexeme: ,
token: STRING
type: string_literal
line_num: 17

lexeme: 0
token: 0
type: decimal_literal
line_num: 17

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 17

lexeme: i
token: CHAR
type: char_literal
line_num: 18

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 18

lexeme: 1
token: 1
type: decimal_literal
line_num: 18

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 18

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 19

lexeme: if
token: CHAR
type: char_literal
line_num: 21

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 21

lexeme: i
token: CHAR
type: char_literal
line_num: 21

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 21

lexeme: 11
token: 11
type: decimal_literal
line_num: 21

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 21

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 21

lexeme: callout
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: printf
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ,
token: STRING
type: string_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 22

lexeme: for
token: CHAR
type: char_literal
line_num: 22

lexeme: loop
token: CHAR
type: char_literal
line_num: 22

lexeme: is
token: CHAR
type: char_literal
line_num: 22

lexeme: bad
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: 2
token: 2
type: decimal_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: \
token: STRING
type: string_literal
line_num: 22

lexeme: n
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 22

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 23

lexeme: if
token: CHAR
type: char_literal
line_num: 25

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 25

lexeme: 1
token: 1
type: decimal_literal
line_num: 25

lexeme: >
token: GREATER_THAN
type: rel_op
line_num: 25

lexeme: 2
token: 2
type: decimal_literal
line_num: 25

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 25

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 25

lexeme: callout
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: printf
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ,
token: STRING
type: string_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 26

lexeme: true
token: TRUE
type: bool_literal
line_num: 26

lexeme: branch
token: CHAR
type: char_literal
line_num: 26

lexeme: is
token: CHAR
type: char_literal
line_num: 26

lexeme: bad
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: 2
token: 2
type: decimal_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: \
token: STRING
type: string_literal
line_num: 26

lexeme: n
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 26

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 27

lexeme: else
token: CHAR
type: char_literal
line_num: 27

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 27

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: don
token: CHAR
type: char_literal
line_num: 28

lexeme: '
token: STRING
type: string_literal
line_num: 28

lexeme: t
token: CHAR
type: char_literal
line_num: 28

lexeme: do
token: CHAR
type: char_literal
line_num: 28

lexeme: anything
token: CHAR
type: char_literal
line_num: 28

lexeme: here
token: CHAR
type: char_literal
line_num: 28

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 29

lexeme: if
token: CHAR
type: char_literal
line_num: 31

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 31

lexeme: 1
token: 1
type: decimal_literal
line_num: 31

lexeme: <
token: LESS_THAN
type: rel_op
line_num: 31

lexeme: 2
token: 2
type: decimal_literal
line_num: 31

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 31

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 31

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: don
token: CHAR
type: char_literal
line_num: 32

lexeme: '
token: STRING
type: string_literal
line_num: 32

lexeme: t
token: CHAR
type: char_literal
line_num: 32

lexeme: do
token: CHAR
type: char_literal
line_num: 32

lexeme: anything
token: CHAR
type: char_literal
line_num: 32

lexeme: here
token: CHAR
type: char_literal
line_num: 32

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 33

lexeme: else
token: CHAR
type: char_literal
line_num: 33

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 33

lexeme: callout
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: printf
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ,
token: STRING
type: string_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 34

lexeme: else
token: CHAR
type: char_literal
line_num: 34

lexeme: branch
token: CHAR
type: char_literal
line_num: 34

lexeme: is
token: CHAR
type: char_literal
line_num: 34

lexeme: bad
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: 2
token: 2
type: decimal_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: \
token: STRING
type: string_literal
line_num: 34

lexeme: n
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 34

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 35

lexeme: callout
token: CHAR
type: char_literal
line_num: 37

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: printf
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: ,
token: STRING
type: string_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: control
token: CHAR
type: char_literal
line_num: 37

lexeme: flow
token: CHAR
type: char_literal
line_num: 37

lexeme: OK
token: CHAR
type: char_literal
line_num: 37

lexeme: if
token: CHAR
type: char_literal
line_num: 37

lexeme: no
token: CHAR
type: char_literal
line_num: 37

lexeme: previous
token: CHAR
type: char_literal
line_num: 37

lexeme: output
token: CHAR
type: char_literal
line_num: 37

lexeme: \
token: STRING
type: string_literal
line_num: 37

lexeme: n
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 37

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 37

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 38

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 40

lexeme: class Program
token: CHAR
type: char_literal
line_num: 1

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 1

lexeme: void
token: CHAR
type: char_literal
line_num: 3

lexeme: main
token: CHAR
type: char_literal
line_num: 3

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 3

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 3

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 3

lexeme: int
token: CHAR
type: char_literal
line_num: 4

lexeme: i
token: CHAR
type: char_literal
line_num: 4

lexeme: ,
token: STRING
type: string_literal
line_num: 4

lexeme: sum
token: CHAR
type: char_literal
line_num: 4

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 4

lexeme: int
token: CHAR
type: char_literal
line_num: 5

lexeme: j
token: CHAR
type: char_literal
line_num: 5

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 5

lexeme: 	
token: STRING
type: string_literal
line_num: 6

lexeme: sum
token: CHAR
type: char_literal
line_num: 6

lexeme: =
token: EQUALS
type: assign_op
line_num: 6

lexeme: 0
token: 0
type: decimal_literal
line_num: 6

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 6

lexeme: for
token: CHAR
type: char_literal
line_num: 8

lexeme: j
token: CHAR
type: char_literal
line_num: 8

lexeme: =
token: EQUALS
type: assign_op
line_num: 8

lexeme: 0
token: 0
type: decimal_literal
line_num: 8

lexeme: ,
token: STRING
type: string_literal
line_num: 8

lexeme: 10
token: 10
type: decimal_literal
line_num: 8

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 8

lexeme: sum
token: CHAR
type: char_literal
line_num: 9

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 9

lexeme: j
token: CHAR
type: char_literal
line_num: 9

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 9

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 10

lexeme: if
token: CHAR
type: char_literal
line_num: 12

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 12

lexeme: sum
token: CHAR
type: char_literal
line_num: 12

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 12

lexeme: 45
token: 45
type: decimal_literal
line_num: 12

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 12

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 12

lexeme: callout
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: printf
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ,
token: STRING
type: string_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 13

lexeme: for
token: CHAR
type: char_literal
line_num: 13

lexeme: loop
token: CHAR
type: char_literal
line_num: 13

lexeme: is
token: CHAR
type: char_literal
line_num: 13

lexeme: bad
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: 1
token: 1
type: decimal_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: \
token: STRING
type: string_literal
line_num: 13

lexeme: n
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 13

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 14

lexeme: i
token: CHAR
type: char_literal
line_num: 16

lexeme: =
token: EQUALS
type: assign_op
line_num: 16

lexeme: 0x1a1
token: 417
type: hex_literal
line_num: 16

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 16

lexeme: for
token: CHAR
type: char_literal
line_num: 17

lexeme: j
token: CHAR
type: char_literal
line_num: 17

lexeme: =
token: EQUALS
type: assign_op
line_num: 17

lexeme: 10
token: 10
type: decimal_literal
line_num: 17

lexeme: ,
token: STRING
type: string_literal
line_num: 17

lexeme: 0
token: 0
type: decimal_literal
line_num: 17

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 17

lexeme: i
token: CHAR
type: char_literal
line_num: 18

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 18

lexeme: 1
token: 1
type: decimal_literal
line_num: 18

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 18

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 19

lexeme: if
token: CHAR
type: char_literal
line_num: 21

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 21

lexeme: i
token: CHAR
type: char_literal
line_num: 21

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 21

lexeme: 11
token: 11
type: decimal_literal
line_num: 21

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 21

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 21

lexeme: callout
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: printf
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ,
token: STRING
type: string_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 22

lexeme: for
token: CHAR
type: char_literal
line_num: 22

lexeme: loop
token: CHAR
type: char_literal
line_num: 22

lexeme: is
token: CHAR
type: char_literal
line_num: 22

lexeme: bad
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: 2
token: 2
type: decimal_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: \
token: STRING
type: string_literal
line_num: 22

lexeme: n
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 22

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 23

lexeme: if
token: CHAR
type: char_literal
line_num: 25

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 25

lexeme: 1
token: 1
type: decimal_literal
line_num: 25

lexeme: >
token: GREATER_THAN
type: rel_op
line_num: 25

lexeme: 2
token: 2
type: decimal_literal
line_num: 25

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 25

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 25

lexeme: callout
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: printf
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ,
token: STRING
type: string_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 26

lexeme: true
token: TRUE
type: bool_literal
line_num: 26

lexeme: branch
token: CHAR
type: char_literal
line_num: 26

lexeme: is
token: CHAR
type: char_literal
line_num: 26

lexeme: bad
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: 2
token: 2
type: decimal_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: \
token: STRING
type: string_literal
line_num: 26

lexeme: n
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 26

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 27

lexeme: else
token: CHAR
type: char_literal
line_num: 27

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 27

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: don
token: CHAR
type: char_literal
line_num: 28

lexeme: '
token: STRING
type: string_literal
line_num: 28

lexeme: t
token: CHAR
type: char_literal
line_num: 28

lexeme: do
token: CHAR
type: char_literal
line_num: 28

lexeme: anything
token: CHAR
type: char_literal
line_num: 28

lexeme: here
token: CHAR
type: char_literal
line_num: 28

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 29

lexeme: if
token: CHAR
type: char_literal
line_num: 31

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 31

lexeme: 1
token: 1
type: decimal_literal
line_num: 31

lexeme: <
token: LESS_THAN
type: rel_op
line_num: 31

lexeme: 2
token: 2
type: decimal_literal
line_num: 31

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 31

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 31

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: don
token: CHAR
type: char_literal
line_num: 32

lexeme: '
token: STRING
type: string_literal
line_num: 32

lexeme: t
token: CHAR
type: char_literal
line_num: 32

lexeme: do
token: CHAR
type: char_literal
line_num: 32

lexeme: anything
token: CHAR
type: char_literal
line_num: 32

lexeme: here
token: CHAR
type: char_literal
line_num: 32

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 33

lexeme: else
token: CHAR
type: char_literal
line_num: 33

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 33

lexeme: callout
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: printf
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ,
token: STRING
type: string_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 34

lexeme: else
token: CHAR
type: char_literal
line_num: 34

lexeme: branch
token: CHAR
type: char_literal
line_num: 34

lexeme: is
token: CHAR
type: char_literal
line_num: 34

lexeme: bad
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: 2
token: 2
type: decimal_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: \
token: STRING
type: string_literal
line_num: 34

lexeme: n
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 34

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 35

lexeme: callout
token: CHAR
type: char_literal
line_num: 37

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: printf
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: ,
token: STRING
type: string_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: control
token: CHAR
type: char_literal
line_num: 37

lexeme: flow
token: CHAR
type: char_literal
line_num: 37

lexeme: OK
token: CHAR
type: char_literal
line_num: 37

lexeme: if
token: CHAR
type: char_literal
line_num: 37

lexeme: no
token: CHAR
type: char_literal
line_num: 37

lexeme: previous
token: CHAR
type: char_literal
line_num: 37

lexeme: output
token: CHAR
type: char_literal
line_num: 37

lexeme: \
token: STRING
type: string_literal
line_num: 37

lexeme: n
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 37

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 37

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 38

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 40

lexeme: class Program
token: CHAR
type: char_literal
line_num: 1

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 1

lexeme: void
token: CHAR
type: char_literal
line_num: 3

lexeme: main
token: CHAR
type: char_literal
line_num: 3

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 3

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 3

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 3

lexeme: int
token: CHAR
type: char_literal
line_num: 4

lexeme: i
token: CHAR
type: char_literal
line_num: 4

lexeme: ,
token: STRING
type: string_literal
line_num: 4

lexeme: sum
token: CHAR
type: char_literal
line_num: 4

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 4

lexeme: int
token: CHAR
type: char_literal
line_num: 5

lexeme: j
token: CHAR
type: char_literal
line_num: 5

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 5

lexeme: 	
token: STRING
type: string_literal
line_num: 6

lexeme: sum
token: CHAR
type: char_literal
line_num: 6

lexeme: =
token: EQUALS
type: assign_op
line_num: 6

lexeme: 0
token: 0
type: decimal_literal
line_num: 6

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 6

lexeme: for
token: CHAR
type: char_literal
line_num: 8

lexeme: j
token: CHAR
type: char_literal
line_num: 8

lexeme: =
token: EQUALS
type: assign_op
line_num: 8

lexeme: 0
token: 0
type: decimal_literal
line_num: 8

lexeme: ,
token: STRING
type: string_literal
line_num: 8

lexeme: 10
token: 10
type: decimal_literal
line_num: 8

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 8

lexeme: sum
token: CHAR
type: char_literal
line_num: 9

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 9

lexeme: j
token: CHAR
type: char_literal
line_num: 9

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 9

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 10

lexeme: if
token: CHAR
type: char_literal
line_num: 12

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 12

lexeme: sum
token: CHAR
type: char_literal
line_num: 12

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 12

lexeme: 45
token: 45
type: decimal_literal
line_num: 12

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 12

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 12

lexeme: callout
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: printf
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ,
token: STRING
type: string_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 13

lexeme: for
token: CHAR
type: char_literal
line_num: 13

lexeme: loop
token: CHAR
type: char_literal
line_num: 13

lexeme: is
token: CHAR
type: char_literal
line_num: 13

lexeme: bad
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: 1
token: 1
type: decimal_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: \
token: STRING
type: string_literal
line_num: 13

lexeme: n
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 13

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 14

lexeme: i
token: CHAR
type: char_literal
line_num: 16

lexeme: =
token: EQUALS
type: assign_op
line_num: 16

lexeme: 0x1a1
token: 417
type: hex_literal
line_num: 16

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 16

lexeme: for
token: CHAR
type: char_literal
line_num: 17

lexeme: j
token: CHAR
type: char_literal
line_num: 17

lexeme: =
token: EQUALS
type: assign_op
line_num: 17

lexeme: 10
token: 10
type: decimal_literal
line_num: 17

lexeme: ,
token: STRING
type: string_literal
line_num: 17

lexeme: 0
token: 0
type: decimal_literal
line_num: 17

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 17

lexeme: i
token: CHAR
type: char_literal
line_num: 18

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 18

lexeme: 1
token: 1
type: decimal_literal
line_num: 18

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 18

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 19

lexeme: if
token: CHAR
type: char_literal
line_num: 21

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 21

lexeme: i
token: CHAR
type: char_literal
line_num: 21

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 21

lexeme: 11
token: 11
type: decimal_literal
line_num: 21

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 21

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 21

lexeme: callout
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: printf
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ,
token: STRING
type: string_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 22

lexeme: for
token: CHAR
type: char_literal
line_num: 22

lexeme: loop
token: CHAR
type: char_literal
line_num: 22

lexeme: is
token: CHAR
type: char_literal
line_num: 22

lexeme: bad
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: 2
token: 2
type: decimal_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: \
token: STRING
type: string_literal
line_num: 22

lexeme: n
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 22

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 23

lexeme: if
token: CHAR
type: char_literal
line_num: 25

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 25

lexeme: 1
token: 1
type: decimal_literal
line_num: 25

lexeme: >
token: GREATER_THAN
type: rel_op
line_num: 25

lexeme: 2
token: 2
type: decimal_literal
line_num: 25

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 25

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 25

lexeme: callout
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: printf
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ,
token: STRING
type: string_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 26

lexeme: true
token: TRUE
type: bool_literal
line_num: 26

lexeme: branch
token: CHAR
type: char_literal
line_num: 26

lexeme: is
token: CHAR
type: char_literal
line_num: 26

lexeme: bad
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: 2
token: 2
type: decimal_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: \
token: STRING
type: string_literal
line_num: 26

lexeme: n
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 26

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 27

lexeme: else
token: CHAR
type: char_literal
line_num: 27

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 27

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: don
token: CHAR
type: char_literal
line_num: 28

lexeme: '
token: STRING
type: string_literal
line_num: 28

lexeme: t
token: CHAR
type: char_literal
line_num: 28

lexeme: do
token: CHAR
type: char_literal
line_num: 28

lexeme: anything
token: CHAR
type: char_literal
line_num: 28

lexeme: here
token: CHAR
type: char_literal
line_num: 28

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 29

lexeme: if
token: CHAR
type: char_literal
line_num: 31

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 31

lexeme: 1
token: 1
type: decimal_literal
line_num: 31

lexeme: <
token: LESS_THAN
type: rel_op
line_num: 31

lexeme: 2
token: 2
type: decimal_literal
line_num: 31

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 31

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 31

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: don
token: CHAR
type: char_literal
line_num: 32

lexeme: '
token: STRING
type: string_literal
line_num: 32

lexeme: t
token: CHAR
type: char_literal
line_num: 32

lexeme: do
token: CHAR
type: char_literal
line_num: 32

lexeme: anything
token: CHAR
type: char_literal
line_num: 32

lexeme: here
token: CHAR
type: char_literal
line_num: 32

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 33

lexeme: else
token: CHAR
type: char_literal
line_num: 33

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 33

lexeme: callout
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: printf
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ,
token: STRING
type: string_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 34

lexeme: else
token: CHAR
type: char_literal
line_num: 34

lexeme: branch
token: CHAR
type: char_literal
line_num: 34

lexeme: is
token: CHAR
type: char_literal
line_num: 34

lexeme: bad
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: 2
token: 2
type: decimal_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: \
token: STRING
type: string_literal
line_num: 34

lexeme: n
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 34

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 35

lexeme: callout
token: CHAR
type: char_literal
line_num: 37

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: printf
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: ,
token: STRING
type: string_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: control
token: CHAR
type: char_literal
line_num: 37

lexeme: flow
token: CHAR
type: char_literal
line_num: 37

lexeme: OK
token: CHAR
type: char_literal
line_num: 37

lexeme: if
token: CHAR
type: char_literal
line_num: 37

lexeme: no
token: CHAR
type: char_literal
line_num: 37

lexeme: previous
token: CHAR
type: char_literal
line_num: 37

lexeme: output
token: CHAR
type: char_literal
line_num: 37

lexeme: \
token: STRING
type: string_literal
line_num: 37

lexeme: n
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 37

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 37

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 38

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 40

lexeme: class Program
token: CHAR
type: char_literal
line_num: 1

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 1

lexeme: void
token: CHAR
type: char_literal
line_num: 3

lexeme: main
token: CHAR
type: char_literal
line_num: 3

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 3

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 3

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 3

lexeme: int
token: CHAR
type: char_literal
line_num: 4

lexeme: i
token: CHAR
type: char_literal
line_num: 4

lexeme: ,
token: STRING
type: string_literal
line_num: 4

lexeme: sum
token: CHAR
type: char_literal
line_num: 4

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 4

lexeme: int
token: CHAR
type: char_literal
line_num: 5

lexeme: j
token: CHAR
type: char_literal
line_num: 5

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 5

lexeme: 	
token: STRING
type: string_literal
line_num: 6

lexeme: sum
token: CHAR
type: char_literal
line_num: 6

lexeme: =
token: EQUALS
type: assign_op
line_num: 6

lexeme: 0
token: 0
type: decimal_literal
line_num: 6

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 6

lexeme: for
token: CHAR
type: char_literal
line_num: 8

lexeme: j
token: CHAR
type: char_literal
line_num: 8

lexeme: =
token: EQUALS
type: assign_op
line_num: 8

lexeme: 0
token: 0
type: decimal_literal
line_num: 8

lexeme: ,
token: STRING
type: string_literal
line_num: 8

lexeme: 10
token: 10
type: decimal_literal
line_num: 8

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 8

lexeme: sum
token: CHAR
type: char_literal
line_num: 9

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 9

lexeme: j
token: CHAR
type: char_literal
line_num: 9

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 9

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 10

lexeme: if
token: CHAR
type: char_literal
line_num: 12

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 12

lexeme: sum
token: CHAR
type: char_literal
line_num: 12

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 12

lexeme: 45
token: 45
type: decimal_literal
line_num: 12

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 12

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 12

lexeme: callout
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: printf
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ,
token: STRING
type: string_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 13

lexeme: for
token: CHAR
type: char_literal
line_num: 13

lexeme: loop
token: CHAR
type: char_literal
line_num: 13

lexeme: is
token: CHAR
type: char_literal
line_num: 13

lexeme: bad
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: 1
token: 1
type: decimal_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: \
token: STRING
type: string_literal
line_num: 13

lexeme: n
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 13

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 14

lexeme: i
token: CHAR
type: char_literal
line_num: 16

lexeme: =
token: EQUALS
type: assign_op
line_num: 16

lexeme: 0x1a1
token: 417
type: hex_literal
line_num: 16

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 16

lexeme: for
token: CHAR
type: char_literal
line_num: 17

lexeme: j
token: CHAR
type: char_literal
line_num: 17

lexeme: =
token: EQUALS
type: assign_op
line_num: 17

lexeme: 10
token: 10
type: decimal_literal
line_num: 17

lexeme: ,
token: STRING
type: string_literal
line_num: 17

lexeme: 0
token: 0
type: decimal_literal
line_num: 17

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 17

lexeme: i
token: CHAR
type: char_literal
line_num: 18

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 18

lexeme: 1
token: 1
type: decimal_literal
line_num: 18

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 18

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 19

lexeme: if
token: CHAR
type: char_literal
line_num: 21

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 21

lexeme: i
token: CHAR
type: char_literal
line_num: 21

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 21

lexeme: 11
token: 11
type: decimal_literal
line_num: 21

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 21

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 21

lexeme: callout
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: printf
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ,
token: STRING
type: string_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 22

lexeme: for
token: CHAR
type: char_literal
line_num: 22

lexeme: loop
token: CHAR
type: char_literal
line_num: 22

lexeme: is
token: CHAR
type: char_literal
line_num: 22

lexeme: bad
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: 2
token: 2
type: decimal_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: \
token: STRING
type: string_literal
line_num: 22

lexeme: n
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 22

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 23

lexeme: if
token: CHAR
type: char_literal
line_num: 25

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 25

lexeme: 1
token: 1
type: decimal_literal
line_num: 25

lexeme: >
token: GREATER_THAN
type: rel_op
line_num: 25

lexeme: 2
token: 2
type: decimal_literal
line_num: 25

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 25

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 25

lexeme: callout
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: printf
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ,
token: STRING
type: string_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 26

lexeme: true
token: TRUE
type: bool_literal
line_num: 26

lexeme: branch
token: CHAR
type: char_literal
line_num: 26

lexeme: is
token: CHAR
type: char_literal
line_num: 26

lexeme: bad
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: 2
token: 2
type: decimal_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: \
token: STRING
type: string_literal
line_num: 26

lexeme: n
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 26

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 27

lexeme: else
token: CHAR
type: char_literal
line_num: 27

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 27

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: don
token: CHAR
type: char_literal
line_num: 28

lexeme: '
token: STRING
type: string_literal
line_num: 28

lexeme: t
token: CHAR
type: char_literal
line_num: 28

lexeme: do
token: CHAR
type: char_literal
line_num: 28

lexeme: anything
token: CHAR
type: char_literal
line_num: 28

lexeme: here
token: CHAR
type: char_literal
line_num: 28

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 29

lexeme: if
token: CHAR
type: char_literal
line_num: 31

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 31

lexeme: 1
token: 1
type: decimal_literal
line_num: 31

lexeme: <
token: LESS_THAN
type: rel_op
line_num: 31

lexeme: 2
token: 2
type: decimal_literal
line_num: 31

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 31

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 31

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: don
token: CHAR
type: char_literal
line_num: 32

lexeme: '
token: STRING
type: string_literal
line_num: 32

lexeme: t
token: CHAR
type: char_literal
line_num: 32

lexeme: do
token: CHAR
type: char_literal
line_num: 32

lexeme: anything
token: CHAR
type: char_literal
line_num: 32

lexeme: here
token: CHAR
type: char_literal
line_num: 32

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 33

lexeme: else
token: CHAR
type: char_literal
line_num: 33

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 33

lexeme: callout
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: printf
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ,
token: STRING
type: string_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 34

lexeme: else
token: CHAR
type: char_literal
line_num: 34

lexeme: branch
token: CHAR
type: char_literal
line_num: 34

lexeme: is
token: CHAR
type: char_literal
line_num: 34

lexeme: bad
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: 2
token: 2
type: decimal_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: \
token: STRING
type: string_literal
line_num: 34

lexeme: n
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 34

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 35

lexeme: callout
token: CHAR
type: char_literal
line_num: 37

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: printf
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: ,
token: STRING
type: string_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: control
token: CHAR
type: char_literal
line_num: 37

lexeme: flow
token: CHAR
type: char_literal
line_num: 37

lexeme: OK
token: CHAR
type: char_literal
line_num: 37

lexeme: if
token: CHAR
type: char_literal
line_num: 37

lexeme: no
token: CHAR
type: char_literal
line_num: 37

lexeme: previous
token: CHAR
type: char_literal
line_num: 37

lexeme: output
token: CHAR
type: char_literal
line_num: 37

lexeme: \
token: STRING
type: string_literal
line_num: 37

lexeme: n
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 37

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 37

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 38

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 40

lexeme: class Program
token: CHAR
type: char_literal
line_num: 1

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 1

lexeme: void
token: CHAR
type: char_literal
line_num: 3

lexeme: main
token: CHAR
type: char_literal
line_num: 3

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 3

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 3

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 3

lexeme: int
token: CHAR
type: char_literal
line_num: 4

lexeme: i
token: CHAR
type: char_literal
line_num: 4

lexeme: ,
token: STRING
type: string_literal
line_num: 4

lexeme: sum
token: CHAR
type: char_literal
line_num: 4

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 4

lexeme: int
token: CHAR
type: char_literal
line_num: 5

lexeme: j
token: CHAR
type: char_literal
line_num: 5

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 5

lexeme: 	
token: STRING
type: string_literal
line_num: 6

lexeme: sum
token: CHAR
type: char_literal
line_num: 6

lexeme: =
token: EQUALS
type: assign_op
line_num: 6

lexeme: 0
token: 0
type: decimal_literal
line_num: 6

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 6

lexeme: for
token: CHAR
type: char_literal
line_num: 8

lexeme: j
token: CHAR
type: char_literal
line_num: 8

lexeme: =
token: EQUALS
type: assign_op
line_num: 8

lexeme: 0
token: 0
type: decimal_literal
line_num: 8

lexeme: ,
token: STRING
type: string_literal
line_num: 8

lexeme: 10
token: 10
type: decimal_literal
line_num: 8

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 8

lexeme: sum
token: CHAR
type: char_literal
line_num: 9

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 9

lexeme: j
token: CHAR
type: char_literal
line_num: 9

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 9

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 10

lexeme: if
token: CHAR
type: char_literal
line_num: 12

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 12

lexeme: sum
token: CHAR
type: char_literal
line_num: 12

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 12

lexeme: 45
token: 45
type: decimal_literal
line_num: 12

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 12

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 12

lexeme: callout
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: printf
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ,
token: STRING
type: string_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 13

lexeme: for
token: CHAR
type: char_literal
line_num: 13

lexeme: loop
token: CHAR
type: char_literal
line_num: 13

lexeme: is
token: CHAR
type: char_literal
line_num: 13

lexeme: bad
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: 1
token: 1
type: decimal_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: \
token: STRING
type: string_literal
line_num: 13

lexeme: n
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 13

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 14

lexeme: i
token: CHAR
type: char_literal
line_num: 16

lexeme: =
token: EQUALS
type: assign_op
line_num: 16

lexeme: 0x1a1
token: 417
type: hex_literal
line_num: 16

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 16

lexeme: for
token: CHAR
type: char_literal
line_num: 17

lexeme: j
token: CHAR
type: char_literal
line_num: 17

lexeme: =
token: EQUALS
type: assign_op
line_num: 17

lexeme: 10
token: 10
type: decimal_literal
line_num: 17

lexeme: ,
token: STRING
type: string_literal
line_num: 17

lexeme: 0
token: 0
type: decimal_literal
line_num: 17

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 17

lexeme: i
token: CHAR
type: char_literal
line_num: 18

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 18

lexeme: 1
token: 1
type: decimal_literal
line_num: 18

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 18

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 19

lexeme: if
token: CHAR
type: char_literal
line_num: 21

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 21

lexeme: i
token: CHAR
type: char_literal
line_num: 21

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 21

lexeme: 11
token: 11
type: decimal_literal
line_num: 21

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 21

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 21

lexeme: callout
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: printf
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ,
token: STRING
type: string_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 22

lexeme: for
token: CHAR
type: char_literal
line_num: 22

lexeme: loop
token: CHAR
type: char_literal
line_num: 22

lexeme: is
token: CHAR
type: char_literal
line_num: 22

lexeme: bad
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: 2
token: 2
type: decimal_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: \
token: STRING
type: string_literal
line_num: 22

lexeme: n
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 22

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 23

lexeme: if
token: CHAR
type: char_literal
line_num: 25

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 25

lexeme: 1
token: 1
type: decimal_literal
line_num: 25

lexeme: >
token: GREATER_THAN
type: rel_op
line_num: 25

lexeme: 2
token: 2
type: decimal_literal
line_num: 25

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 25

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 25

lexeme: callout
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: printf
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ,
token: STRING
type: string_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 26

lexeme: true
token: TRUE
type: bool_literal
line_num: 26

lexeme: branch
token: CHAR
type: char_literal
line_num: 26

lexeme: is
token: CHAR
type: char_literal
line_num: 26

lexeme: bad
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: 2
token: 2
type: decimal_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: \
token: STRING
type: string_literal
line_num: 26

lexeme: n
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 26

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 27

lexeme: else
token: CHAR
type: char_literal
line_num: 27

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 27

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: don
token: CHAR
type: char_literal
line_num: 28

lexeme: '
token: STRING
type: string_literal
line_num: 28

lexeme: t
token: CHAR
type: char_literal
line_num: 28

lexeme: do
token: CHAR
type: char_literal
line_num: 28

lexeme: anything
token: CHAR
type: char_literal
line_num: 28

lexeme: here
token: CHAR
type: char_literal
line_num: 28

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 29

lexeme: if
token: CHAR
type: char_literal
line_num: 31

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 31

lexeme: 1
token: 1
type: decimal_literal
line_num: 31

lexeme: <
token: LESS_THAN
type: rel_op
line_num: 31

lexeme: 2
token: 2
type: decimal_literal
line_num: 31

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 31

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 31

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: don
token: CHAR
type: char_literal
line_num: 32

lexeme: '
token: STRING
type: string_literal
line_num: 32

lexeme: t
token: CHAR
type: char_literal
line_num: 32

lexeme: do
token: CHAR
type: char_literal
line_num: 32

lexeme: anything
token: CHAR
type: char_literal
line_num: 32

lexeme: here
token: CHAR
type: char_literal
line_num: 32

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 33

lexeme: else
token: CHAR
type: char_literal
line_num: 33

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 33

lexeme: callout
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: printf
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ,
token: STRING
type: string_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 34

lexeme: else
token: CHAR
type: char_literal
line_num: 34

lexeme: branch
token: CHAR
type: char_literal
line_num: 34

lexeme: is
token: CHAR
type: char_literal
line_num: 34

lexeme: bad
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: 2
token: 2
type: decimal_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: \
token: STRING
type: string_literal
line_num: 34

lexeme: n
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 34

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 35

lexeme: callout
token: CHAR
type: char_literal
line_num: 37

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: printf
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: ,
token: STRING
type: string_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: control
token: CHAR
type: char_literal
line_num: 37

lexeme: flow
token: CHAR
type: char_literal
line_num: 37

lexeme: OK
token: CHAR
type: char_literal
line_num: 37

lexeme: if
token: CHAR
type: char_literal
line_num: 37

lexeme: no
token: CHAR
type: char_literal
line_num: 37

lexeme: previous
token: CHAR
type: char_literal
line_num: 37

lexeme: output
token: CHAR
type: char_literal
line_num: 37

lexeme: \
token: STRING
type: string_literal
line_num: 37

lexeme: n
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 37

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 37

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 38

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 40

lexeme: class Program
token: CHAR
type: char_literal
line_num: 1

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 1

lexeme: void
token: CHAR
type: char_literal
line_num: 3

lexeme: main
token: CHAR
type: char_literal
line_num: 3

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 3

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 3

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 3

lexeme: int
token: CHAR
type: char_literal
line_num: 4

lexeme: i
token: CHAR
type: char_literal
line_num: 4

lexeme: ,
token: STRING
type: string_literal
line_num: 4

lexeme: sum
token: CHAR
type: char_literal
line_num: 4

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 4

lexeme: int
token: CHAR
type: char_literal
line_num: 5

lexeme: j
token: CHAR
type: char_literal
line_num: 5

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 5

lexeme: 	
token: STRING
type: string_literal
line_num: 6

lexeme: sum
token: CHAR
type: char_literal
line_num: 6

lexeme: =
token: EQUALS
type: assign_op
line_num: 6

lexeme: 0
token: 0
type: decimal_literal
line_num: 6

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 6

lexeme: for
token: CHAR
type: char_literal
line_num: 8

lexeme: j
token: CHAR
type: char_literal
line_num: 8

lexeme: =
token: EQUALS
type: assign_op
line_num: 8

lexeme: 0
token: 0
type: decimal_literal
line_num: 8

lexeme: ,
token: STRING
type: string_literal
line_num: 8

lexeme: 10
token: 10
type: decimal_literal
line_num: 8

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 8

lexeme: sum
token: CHAR
type: char_literal
line_num: 9

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 9

lexeme: j
token: CHAR
type: char_literal
line_num: 9

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 9

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 10

lexeme: if
token: CHAR
type: char_literal
line_num: 12

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 12

lexeme: sum
token: CHAR
type: char_literal
line_num: 12

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 12

lexeme: 45
token: 45
type: decimal_literal
line_num: 12

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 12

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 12

lexeme: callout
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: printf
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ,
token: STRING
type: string_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 13

lexeme: for
token: CHAR
type: char_literal
line_num: 13

lexeme: loop
token: CHAR
type: char_literal
line_num: 13

lexeme: is
token: CHAR
type: char_literal
line_num: 13

lexeme: bad
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: 1
token: 1
type: decimal_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: \
token: STRING
type: string_literal
line_num: 13

lexeme: n
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 13

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 14

lexeme: i
token: CHAR
type: char_literal
line_num: 16

lexeme: =
token: EQUALS
type: assign_op
line_num: 16

lexeme: 0x1a1
token: 417
type: hex_literal
line_num: 16

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 16

lexeme: for
token: CHAR
type: char_literal
line_num: 17

lexeme: j
token: CHAR
type: char_literal
line_num: 17

lexeme: =
token: EQUALS
type: assign_op
line_num: 17

lexeme: 10
token: 10
type: decimal_literal
line_num: 17

lexeme: ,
token: STRING
type: string_literal
line_num: 17

lexeme: 0
token: 0
type: decimal_literal
line_num: 17

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 17

lexeme: i
token: CHAR
type: char_literal
line_num: 18

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 18

lexeme: 1
token: 1
type: decimal_literal
line_num: 18

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 18

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 19

lexeme: if
token: CHAR
type: char_literal
line_num: 21

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 21

lexeme: i
token: CHAR
type: char_literal
line_num: 21

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 21

lexeme: 11
token: 11
type: decimal_literal
line_num: 21

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 21

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 21

lexeme: callout
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: printf
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ,
token: STRING
type: string_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 22

lexeme: for
token: CHAR
type: char_literal
line_num: 22

lexeme: loop
token: CHAR
type: char_literal
line_num: 22

lexeme: is
token: CHAR
type: char_literal
line_num: 22

lexeme: bad
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: 2
token: 2
type: decimal_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: \
token: STRING
type: string_literal
line_num: 22

lexeme: n
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 22

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 23

lexeme: if
token: CHAR
type: char_literal
line_num: 25

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 25

lexeme: 1
token: 1
type: decimal_literal
line_num: 25

lexeme: >
token: GREATER_THAN
type: rel_op
line_num: 25

lexeme: 2
token: 2
type: decimal_literal
line_num: 25

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 25

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 25

lexeme: callout
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: printf
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ,
token: STRING
type: string_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 26

lexeme: true
token: TRUE
type: bool_literal
line_num: 26

lexeme: branch
token: CHAR
type: char_literal
line_num: 26

lexeme: is
token: CHAR
type: char_literal
line_num: 26

lexeme: bad
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: 2
token: 2
type: decimal_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: \
token: STRING
type: string_literal
line_num: 26

lexeme: n
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 26

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 27

lexeme: else
token: CHAR
type: char_literal
line_num: 27

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 27

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: don
token: CHAR
type: char_literal
line_num: 28

lexeme: '
token: STRING
type: string_literal
line_num: 28

lexeme: t
token: CHAR
type: char_literal
line_num: 28

lexeme: do
token: CHAR
type: char_literal
line_num: 28

lexeme: anything
token: CHAR
type: char_literal
line_num: 28

lexeme: here
token: CHAR
type: char_literal
line_num: 28

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 29

lexeme: if
token: CHAR
type: char_literal
line_num: 31

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 31

lexeme: 1
token: 1
type: decimal_literal
line_num: 31

lexeme: <
token: LESS_THAN
type: rel_op
line_num: 31

lexeme: 2
token: 2
type: decimal_literal
line_num: 31

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 31

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 31

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: don
token: CHAR
type: char_literal
line_num: 32

lexeme: '
token: STRING
type: string_literal
line_num: 32

lexeme: t
token: CHAR
type: char_literal
line_num: 32

lexeme: do
token: CHAR
type: char_literal
line_num: 32

lexeme: anything
token: CHAR
type: char_literal
line_num: 32

lexeme: here
token: CHAR
type: char_literal
line_num: 32

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 33

lexeme: else
token: CHAR
type: char_literal
line_num: 33

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 33

lexeme: callout
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: printf
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ,
token: STRING
type: string_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 34

lexeme: else
token: CHAR
type: char_literal
line_num: 34

lexeme: branch
token: CHAR
type: char_literal
line_num: 34

lexeme: is
token: CHAR
type: char_literal
line_num: 34

lexeme: bad
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: 2
token: 2
type: decimal_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: \
token: STRING
type: string_literal
line_num: 34

lexeme: n
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 34

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 35

lexeme: callout
token: CHAR
type: char_literal
line_num: 37

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: printf
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: ,
token: STRING
type: string_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: control
token: CHAR
type: char_literal
line_num: 37

lexeme: flow
token: CHAR
type: char_literal
line_num: 37

lexeme: OK
token: CHAR
type: char_literal
line_num: 37

lexeme: if
token: CHAR
type: char_literal
line_num: 37

lexeme: no
token: CHAR
type: char_literal
line_num: 37

lexeme: previous
token: CHAR
type: char_literal
line_num: 37

lexeme: output
token: CHAR
type: char_literal
line_num: 37

lexeme: \
token: STRING
type: string_literal
line_num: 37

lexeme: n
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 37

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 37

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 38

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 40

lexeme: class Program
token: CHAR
type: char_literal
line_num: 1

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 1

lexeme: void
token: CHAR
type: char_literal
line_num: 3

lexeme: main
token: CHAR
type: char_literal
line_num: 3

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 3

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 3

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 3

lexeme: int
token: CHAR
type: char_literal
line_num: 4

lexeme: i
token: CHAR
type: char_literal
line_num: 4

lexeme: ,
token: STRING
type: string_literal
line_num: 4

lexeme: sum
token: CHAR
type: char_literal
line_num: 4

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 4

lexeme: int
token: CHAR
type: char_literal
line_num: 5

lexeme: j
token: CHAR
type: char_literal
line_num: 5

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 5

lexeme: 	
token: STRING
type: string_literal
line_num: 6

lexeme: sum
token: CHAR
type: char_literal
line_num: 6

lexeme: =
token: EQUALS
type: assign_op
line_num: 6

lexeme: 0
token: 0
type: decimal_literal
line_num: 6

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 6

lexeme: for
token: CHAR
type: char_literal
line_num: 8

lexeme: j
token: CHAR
type: char_literal
line_num: 8

lexeme: =
token: EQUALS
type: assign_op
line_num: 8

lexeme: 0
token: 0
type: decimal_literal
line_num: 8

lexeme: ,
token: STRING
type: string_literal
line_num: 8

lexeme: 10
token: 10
type: decimal_literal
line_num: 8

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 8

lexeme: sum
token: CHAR
type: char_literal
line_num: 9

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 9

lexeme: j
token: CHAR
type: char_literal
line_num: 9

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 9

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 10

lexeme: if
token: CHAR
type: char_literal
line_num: 12

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 12

lexeme: sum
token: CHAR
type: char_literal
line_num: 12

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 12

lexeme: 45
token: 45
type: decimal_literal
line_num: 12

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 12

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 12

lexeme: callout
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: printf
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ,
token: STRING
type: string_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 13

lexeme: for
token: CHAR
type: char_literal
line_num: 13

lexeme: loop
token: CHAR
type: char_literal
line_num: 13

lexeme: is
token: CHAR
type: char_literal
line_num: 13

lexeme: bad
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: 1
token: 1
type: decimal_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: \
token: STRING
type: string_literal
line_num: 13

lexeme: n
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 13

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 14

lexeme: i
token: CHAR
type: char_literal
line_num: 16

lexeme: =
token: EQUALS
type: assign_op
line_num: 16

lexeme: 0x1a1
token: 417
type: hex_literal
line_num: 16

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 16

lexeme: for
token: CHAR
type: char_literal
line_num: 17

lexeme: j
token: CHAR
type: char_literal
line_num: 17

lexeme: =
token: EQUALS
type: assign_op
line_num: 17

lexeme: 10
token: 10
type: decimal_literal
line_num: 17

lexeme: ,
token: STRING
type: string_literal
line_num: 17

lexeme: 0
token: 0
type: decimal_literal
line_num: 17

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 17

lexeme: i
token: CHAR
type: char_literal
line_num: 18

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 18

lexeme: 1
token: 1
type: decimal_literal
line_num: 18

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 18

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 19

lexeme: if
token: CHAR
type: char_literal
line_num: 21

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 21

lexeme: i
token: CHAR
type: char_literal
line_num: 21

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 21

lexeme: 11
token: 11
type: decimal_literal
line_num: 21

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 21

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 21

lexeme: callout
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: printf
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ,
token: STRING
type: string_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 22

lexeme: for
token: CHAR
type: char_literal
line_num: 22

lexeme: loop
token: CHAR
type: char_literal
line_num: 22

lexeme: is
token: CHAR
type: char_literal
line_num: 22

lexeme: bad
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: 2
token: 2
type: decimal_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: \
token: STRING
type: string_literal
line_num: 22

lexeme: n
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 22

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 23

lexeme: if
token: CHAR
type: char_literal
line_num: 25

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 25

lexeme: 1
token: 1
type: decimal_literal
line_num: 25

lexeme: >
token: GREATER_THAN
type: rel_op
line_num: 25

lexeme: 2
token: 2
type: decimal_literal
line_num: 25

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 25

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 25

lexeme: callout
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: printf
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ,
token: STRING
type: string_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 26

lexeme: true
token: TRUE
type: bool_literal
line_num: 26

lexeme: branch
token: CHAR
type: char_literal
line_num: 26

lexeme: is
token: CHAR
type: char_literal
line_num: 26

lexeme: bad
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: 2
token: 2
type: decimal_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: \
token: STRING
type: string_literal
line_num: 26

lexeme: n
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 26

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 27

lexeme: else
token: CHAR
type: char_literal
line_num: 27

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 27

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: don
token: CHAR
type: char_literal
line_num: 28

lexeme: '
token: STRING
type: string_literal
line_num: 28

lexeme: t
token: CHAR
type: char_literal
line_num: 28

lexeme: do
token: CHAR
type: char_literal
line_num: 28

lexeme: anything
token: CHAR
type: char_literal
line_num: 28

lexeme: here
token: CHAR
type: char_literal
line_num: 28

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 29

lexeme: if
token: CHAR
type: char_literal
line_num: 31

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 31

lexeme: 1
token: 1
type: decimal_literal
line_num: 31

lexeme: <
token: LESS_THAN
type: rel_op
line_num: 31

lexeme: 2
token: 2
type: decimal_literal
line_num: 31

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 31

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 31

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: don
token: CHAR
type: char_literal
line_num: 32

lexeme: '
token: STRING
type: string_literal
line_num: 32

lexeme: t
token: CHAR
type: char_literal
line_num: 32

lexeme: do
token: CHAR
type: char_literal
line_num: 32

lexeme: anything
token: CHAR
type: char_literal
line_num: 32

lexeme: here
token: CHAR
type: char_literal
line_num: 32

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 33

lexeme: else
token: CHAR
type: char_literal
line_num: 33

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 33

lexeme: callout
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: printf
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ,
token: STRING
type: string_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 34

lexeme: else
token: CHAR
type: char_literal
line_num: 34

lexeme: branch
token: CHAR
type: char_literal
line_num: 34

lexeme: is
token: CHAR
type: char_literal
line_num: 34

lexeme: bad
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: 2
token: 2
type: decimal_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: \
token: STRING
type: string_literal
line_num: 34

lexeme: n
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 34

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 35

lexeme: callout
token: CHAR
type: char_literal
line_num: 37

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: printf
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: ,
token: STRING
type: string_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: control
token: CHAR
type: char_literal
line_num: 37

lexeme: flow
token: CHAR
type: char_literal
line_num: 37

lexeme: OK
token: CHAR
type: char_literal
line_num: 37

lexeme: if
token: CHAR
type: char_literal
line_num: 37

lexeme: no
token: CHAR
type: char_literal
line_num: 37

lexeme: previous
token: CHAR
type: char_literal
line_num: 37

lexeme: output
token: CHAR
type: char_literal
line_num: 37

lexeme: \
token: STRING
type: string_literal
line_num: 37

lexeme: n
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 37

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 37

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 38

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 40

lexeme: class Program
token: CHAR
type: char_literal
line_num: 1

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 1

lexeme: void
token: CHAR
type: char_literal
line_num: 3

lexeme: main
token: CHAR
type: char_literal
line_num: 3

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 3

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 3

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 3

lexeme: int
token: CHAR
type: char_literal
line_num: 4

lexeme: i
token: CHAR
type: char_literal
line_num: 4

lexeme: ,
token: STRING
type: string_literal
line_num: 4

lexeme: sum
token: CHAR
type: char_literal
line_num: 4

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 4

lexeme: int
token: CHAR
type: char_literal
line_num: 5

lexeme: j
token: CHAR
type: char_literal
line_num: 5

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 5

lexeme: 	
token: STRING
type: string_literal
line_num: 6

lexeme: sum
token: CHAR
type: char_literal
line_num: 6

lexeme: =
token: EQUALS
type: assign_op
line_num: 6

lexeme: 0
token: 0
type: decimal_literal
line_num: 6

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 6

lexeme: for
token: CHAR
type: char_literal
line_num: 8

lexeme: j
token: CHAR
type: char_literal
line_num: 8

lexeme: =
token: EQUALS
type: assign_op
line_num: 8

lexeme: 0
token: 0
type: decimal_literal
line_num: 8

lexeme: ,
token: STRING
type: string_literal
line_num: 8

lexeme: 10
token: 10
type: decimal_literal
line_num: 8

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 8

lexeme: sum
token: CHAR
type: char_literal
line_num: 9

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 9

lexeme: j
token: CHAR
type: char_literal
line_num: 9

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 9

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 10

lexeme: if
token: CHAR
type: char_literal
line_num: 12

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 12

lexeme: sum
token: CHAR
type: char_literal
line_num: 12

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 12

lexeme: 45
token: 45
type: decimal_literal
line_num: 12

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 12

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 12

lexeme: callout
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: printf
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ,
token: STRING
type: string_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 13

lexeme: for
token: CHAR
type: char_literal
line_num: 13

lexeme: loop
token: CHAR
type: char_literal
line_num: 13

lexeme: is
token: CHAR
type: char_literal
line_num: 13

lexeme: bad
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: 1
token: 1
type: decimal_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: \
token: STRING
type: string_literal
line_num: 13

lexeme: n
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 13

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 14

lexeme: i
token: CHAR
type: char_literal
line_num: 16

lexeme: =
token: EQUALS
type: assign_op
line_num: 16

lexeme: 0x1a1
token: 417
type: hex_literal
line_num: 16

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 16

lexeme: for
token: CHAR
type: char_literal
line_num: 17

lexeme: j
token: CHAR
type: char_literal
line_num: 17

lexeme: =
token: EQUALS
type: assign_op
line_num: 17

lexeme: 10
token: 10
type: decimal_literal
line_num: 17

lexeme: ,
token: STRING
type: string_literal
line_num: 17

lexeme: 0
token: 0
type: decimal_literal
line_num: 17

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 17

lexeme: i
token: CHAR
type: char_literal
line_num: 18

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 18

lexeme: 1
token: 1
type: decimal_literal
line_num: 18

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 18

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 19

lexeme: if
token: CHAR
type: char_literal
line_num: 21

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 21

lexeme: i
token: CHAR
type: char_literal
line_num: 21

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 21

lexeme: 11
token: 11
type: decimal_literal
line_num: 21

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 21

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 21

lexeme: callout
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: printf
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ,
token: STRING
type: string_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 22

lexeme: for
token: CHAR
type: char_literal
line_num: 22

lexeme: loop
token: CHAR
type: char_literal
line_num: 22

lexeme: is
token: CHAR
type: char_literal
line_num: 22

lexeme: bad
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: 2
token: 2
type: decimal_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: \
token: STRING
type: string_literal
line_num: 22

lexeme: n
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 22

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 23

lexeme: if
token: CHAR
type: char_literal
line_num: 25

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 25

lexeme: 1
token: 1
type: decimal_literal
line_num: 25

lexeme: >
token: GREATER_THAN
type: rel_op
line_num: 25

lexeme: 2
token: 2
type: decimal_literal
line_num: 25

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 25

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 25

lexeme: callout
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: printf
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ,
token: STRING
type: string_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 26

lexeme: true
token: TRUE
type: bool_literal
line_num: 26

lexeme: branch
token: CHAR
type: char_literal
line_num: 26

lexeme: is
token: CHAR
type: char_literal
line_num: 26

lexeme: bad
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: 2
token: 2
type: decimal_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: \
token: STRING
type: string_literal
line_num: 26

lexeme: n
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 26

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 27

lexeme: else
token: CHAR
type: char_literal
line_num: 27

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 27

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: don
token: CHAR
type: char_literal
line_num: 28

lexeme: '
token: STRING
type: string_literal
line_num: 28

lexeme: t
token: CHAR
type: char_literal
line_num: 28

lexeme: do
token: CHAR
type: char_literal
line_num: 28

lexeme: anything
token: CHAR
type: char_literal
line_num: 28

lexeme: here
token: CHAR
type: char_literal
line_num: 28

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 29

lexeme: if
token: CHAR
type: char_literal
line_num: 31

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 31

lexeme: 1
token: 1
type: decimal_literal
line_num: 31

lexeme: <
token: LESS_THAN
type: rel_op
line_num: 31

lexeme: 2
token: 2
type: decimal_literal
line_num: 31

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 31

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 31

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: don
token: CHAR
type: char_literal
line_num: 32

lexeme: '
token: STRING
type: string_literal
line_num: 32

lexeme: t
token: CHAR
type: char_literal
line_num: 32

lexeme: do
token: CHAR
type: char_literal
line_num: 32

lexeme: anything
token: CHAR
type: char_literal
line_num: 32

lexeme: here
token: CHAR
type: char_literal
line_num: 32

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 33

lexeme: else
token: CHAR
type: char_literal
line_num: 33

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 33

lexeme: callout
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: printf
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ,
token: STRING
type: string_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 34

lexeme: else
token: CHAR
type: char_literal
line_num: 34

lexeme: branch
token: CHAR
type: char_literal
line_num: 34

lexeme: is
token: CHAR
type: char_literal
line_num: 34

lexeme: bad
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: 2
token: 2
type: decimal_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: \
token: STRING
type: string_literal
line_num: 34

lexeme: n
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 34

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 35

lexeme: callout
token: CHAR
type: char_literal
line_num: 37

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: printf
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: ,
token: STRING
type: string_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: control
token: CHAR
type: char_literal
line_num: 37

lexeme: flow
token: CHAR
type: char_literal
line_num: 37

lexeme: OK
token: CHAR
type: char_literal
line_num: 37

lexeme: if
token: CHAR
type: char_literal
line_num: 37

lexeme: no
token: CHAR
type: char_literal
line_num: 37

lexeme: previous
token: CHAR
type: char_literal
line_num: 37

lexeme: output
token: CHAR
type: char_literal
line_num: 37

lexeme: \
token: STRING
type: string_literal
line_num: 37

lexeme: n
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 37

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 37

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 38

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 40

lexeme: class Program
token: CHAR
type: char_literal
line_num: 1

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 1

lexeme: void
token: CHAR
type: char_literal
line_num: 3

lexeme: main
token: CHAR
type: char_literal
line_num: 3

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 3

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 3

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 3

lexeme: int
token: CHAR
type: char_literal
line_num: 4

lexeme: i
token: CHAR
type: char_literal
line_num: 4

lexeme: ,
token: STRING
type: string_literal
line_num: 4

lexeme: sum
token: CHAR
type: char_literal
line_num: 4

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 4

lexeme: int
token: CHAR
type: char_literal
line_num: 5

lexeme: j
token: CHAR
type: char_literal
line_num: 5

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 5

lexeme: 	
token: STRING
type: string_literal
line_num: 6

lexeme: 1
token: 1
type: decimal_literal
line_num: 6

lexeme: sum
token: CHAR
type: char_literal
line_num: 6

lexeme: =
token: EQUALS
type: assign_op
line_num: 6

lexeme: 0
token: 0
type: decimal_literal
line_num: 6

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 6

lexeme: for
token: CHAR
type: char_literal
line_num: 8

lexeme: j
token: CHAR
type: char_literal
line_num: 8

lexeme: =
token: EQUALS
type: assign_op
line_num: 8

lexeme: 0
token: 0
type: decimal_literal
line_num: 8

lexeme: ,
token: STRING
type: string_literal
line_num: 8

lexeme: 10
token: 10
type: decimal_literal
line_num: 8

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 8

lexeme: sum
token: CHAR
type: char_literal
line_num: 9

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 9

lexeme: j
token: CHAR
type: char_literal
line_num: 9

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 9

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 10

lexeme: if
token: CHAR
type: char_literal
line_num: 12

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 12

lexeme: sum
token: CHAR
type: char_literal
line_num: 12

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 12

lexeme: 45
token: 45
type: decimal_literal
line_num: 12

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 12

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 12

lexeme: callout
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: printf
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ,
token: STRING
type: string_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 13

lexeme: for
token: CHAR
type: char_literal
line_num: 13

lexeme: loop
token: CHAR
type: char_literal
line_num: 13

lexeme: is
token: CHAR
type: char_literal
line_num: 13

lexeme: bad
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: 1
token: 1
type: decimal_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: \
token: STRING
type: string_literal
line_num: 13

lexeme: n
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 13

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 14

lexeme: i
token: CHAR
type: char_literal
line_num: 16

lexeme: =
token: EQUALS
type: assign_op
line_num: 16

lexeme: 0x1a1
token: 417
type: hex_literal
line_num: 16

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 16

lexeme: for
token: CHAR
type: char_literal
line_num: 17

lexeme: j
token: CHAR
type: char_literal
line_num: 17

lexeme: =
token: EQUALS
type: assign_op
line_num: 17

lexeme: 10
token: 10
type: decimal_literal
line_num: 17

lexeme: ,
token: STRING
type: string_literal
line_num: 17

lexeme: 0
token: 0
type: decimal_literal
line_num: 17

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 17

lexeme: i
token: CHAR
type: char_literal
line_num: 18

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 18

lexeme: 1
token: 1
type: decimal_literal
line_num: 18

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 18

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 19

lexeme: if
token: CHAR
type: char_literal
line_num: 21

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 21

lexeme: i
token: CHAR
type: char_literal
line_num: 21

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 21

lexeme: 11
token: 11
type: decimal_literal
line_num: 21

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 21

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 21

lexeme: callout
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: printf
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ,
token: STRING
type: string_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 22

lexeme: for
token: CHAR
type: char_literal
line_num: 22

lexeme: loop
token: CHAR
type: char_literal
line_num: 22

lexeme: is
token: CHAR
type: char_literal
line_num: 22

lexeme: bad
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: 2
token: 2
type: decimal_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: \
token: STRING
type: string_literal
line_num: 22

lexeme: n
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 22

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 23

lexeme: if
token: CHAR
type: char_literal
line_num: 25

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 25

lexeme: 1
token: 1
type: decimal_literal
line_num: 25

lexeme: >
token: GREATER_THAN
type: rel_op
line_num: 25

lexeme: 2
token: 2
type: decimal_literal
line_num: 25

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 25

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 25

lexeme: callout
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: printf
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ,
token: STRING
type: string_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 26

lexeme: true
token: TRUE
type: bool_literal
line_num: 26

lexeme: branch
token: CHAR
type: char_literal
line_num: 26

lexeme: is
token: CHAR
type: char_literal
line_num: 26

lexeme: bad
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: 2
token: 2
type: decimal_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: \
token: STRING
type: string_literal
line_num: 26

lexeme: n
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 26

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 27

lexeme: else
token: CHAR
type: char_literal
line_num: 27

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 27

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: don
token: CHAR
type: char_literal
line_num: 28

lexeme: '
token: STRING
type: string_literal
line_num: 28

lexeme: t
token: CHAR
type: char_literal
line_num: 28

lexeme: do
token: CHAR
type: char_literal
line_num: 28

lexeme: anything
token: CHAR
type: char_literal
line_num: 28

lexeme: here
token: CHAR
type: char_literal
line_num: 28

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 29

lexeme: if
token: CHAR
type: char_literal
line_num: 31

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 31

lexeme: 1
token: 1
type: decimal_literal
line_num: 31

lexeme: <
token: LESS_THAN
type: rel_op
line_num: 31

lexeme: 2
token: 2
type: decimal_literal
line_num: 31

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 31

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 31

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: don
token: CHAR
type: char_literal
line_num: 32

lexeme: '
token: STRING
type: string_literal
line_num: 32

lexeme: t
token: CHAR
type: char_literal
line_num: 32

lexeme: do
token: CHAR
type: char_literal
line_num: 32

lexeme: anything
token: CHAR
type: char_literal
line_num: 32

lexeme: here
token: CHAR
type: char_literal
line_num: 32

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 33

lexeme: else
token: CHAR
type: char_literal
line_num: 33

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 33

lexeme: callout
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: printf
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ,
token: STRING
type: string_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 34

lexeme: else
token: CHAR
type: char_literal
line_num: 34

lexeme: branch
token: CHAR
type: char_literal
line_num: 34

lexeme: is
token: CHAR
type: char_literal
line_num: 34

lexeme: bad
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: 2
token: 2
type: decimal_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: \
token: STRING
type: string_literal
line_num: 34

lexeme: n
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 34

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 35

lexeme: callout
token: CHAR
type: char_literal
line_num: 37

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: printf
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: ,
token: STRING
type: string_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: control
token: CHAR
type: char_literal
line_num: 37

lexeme: flow
token: CHAR
type: char_literal
line_num: 37

lexeme: OK
token: CHAR
type: char_literal
line_num: 37

lexeme: if
token: CHAR
type: char_literal
line_num: 37

lexeme: no
token: CHAR
type: char_literal
line_num: 37

lexeme: previous
token: CHAR
type: char_literal
line_num: 37

lexeme: output
token: CHAR
type: char_literal
line_num: 37

lexeme: \
token: STRING
type: string_literal
line_num: 37

lexeme: n
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 37

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 37

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 38

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 40

lexeme: class Program
token: CHAR
type: char_literal
line_num: 1

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 1

lexeme: void
token: CHAR
type: char_literal
line_num: 3

lexeme: main
token: CHAR
type: char_literal
line_num: 3

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 3

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 3

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 3

lexeme: int
token: CHAR
type: char_literal
line_num: 4

lexeme: i
token: CHAR
type: char_literal
line_num: 4

lexeme: ,
token: STRING
type: string_literal
line_num: 4

lexeme: sum
token: CHAR
type: char_literal
line_num: 4

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 4

lexeme: int
token: CHAR
type: char_literal
line_num: 5

lexeme: j
token: CHAR
type: char_literal
line_num: 5

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 5

lexeme: 	
token: STRING
type: string_literal
line_num: 6

lexeme: sum
token: CHAR
type: char_literal
line_num: 6

lexeme: =
token: EQUALS
type: assign_op
line_num: 6

lexeme: 0
token: 0
type: decimal_literal
line_num: 6

lexeme: 2
token: 2
type: decimal_literal
line_num: 6

lexeme: 3
token: 3
type: decimal_literal
line_num: 6

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 6

lexeme: for
token: CHAR
type: char_literal
line_num: 8

lexeme: j
token: CHAR
type: char_literal
line_num: 8

lexeme: =
token: EQUALS
type: assign_op
line_num: 8

lexeme: 0
token: 0
type: decimal_literal
line_num: 8

lexeme: ,
token: STRING
type: string_literal
line_num: 8

lexeme: 10
token: 10
type: decimal_literal
line_num: 8

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 8

lexeme: sum
token: CHAR
type: char_literal
line_num: 9

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 9

lexeme: j
token: CHAR
type: char_literal
line_num: 9

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 9

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 10

lexeme: if
token: CHAR
type: char_literal
line_num: 12

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 12

lexeme: sum
token: CHAR
type: char_literal
line_num: 12

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 12

lexeme: 45
token: 45
type: decimal_literal
line_num: 12

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 12

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 12

lexeme: callout
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: printf
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ,
token: STRING
type: string_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 13

lexeme: for
token: CHAR
type: char_literal
line_num: 13

lexeme: loop
token: CHAR
type: char_literal
line_num: 13

lexeme: is
token: CHAR
type: char_literal
line_num: 13

lexeme: bad
token: CHAR
type: char_literal
line_num: 13

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 13

lexeme: 1
token: 1
type: decimal_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: \
token: STRING
type: string_literal
line_num: 13

lexeme: n
token: CHAR
type: char_literal
line_num: 13

lexeme: "
token: STRING
type: string_literal
line_num: 13

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 13

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 13

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 14

lexeme: i
token: CHAR
type: char_literal
line_num: 16

lexeme: =
token: EQUALS
type: assign_op
line_num: 16

lexeme: 0x1a1
token: 417
type: hex_literal
line_num: 16

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 16

lexeme: for
token: CHAR
type: char_literal
line_num: 17

lexeme: j
token: CHAR
type: char_literal
line_num: 17

lexeme: =
token: EQUALS
type: assign_op
line_num: 17

lexeme: 10
token: 10
type: decimal_literal
line_num: 17

lexeme: ,
token: STRING
type: string_literal
line_num: 17

lexeme: 0
token: 0
type: decimal_literal
line_num: 17

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 17

lexeme: i
token: CHAR
type: char_literal
line_num: 18

lexeme: +=
token: PLUS_EQUALS
type: assign_op
line_num: 18

lexeme: 1
token: 1
type: decimal_literal
line_num: 18

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 18

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 19

lexeme: if
token: CHAR
type: char_literal
line_num: 21

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 21

lexeme: i
token: CHAR
type: char_literal
line_num: 21

lexeme: !=
token: NEG_EQUALS
type: eq_op
line_num: 21

lexeme: 11
token: 11
type: decimal_literal
line_num: 21

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 21

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 21

lexeme: callout
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: printf
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ,
token: STRING
type: string_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 22

lexeme: for
token: CHAR
type: char_literal
line_num: 22

lexeme: loop
token: CHAR
type: char_literal
line_num: 22

lexeme: is
token: CHAR
type: char_literal
line_num: 22

lexeme: bad
token: CHAR
type: char_literal
line_num: 22

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 22

lexeme: 2
token: 2
type: decimal_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: \
token: STRING
type: string_literal
line_num: 22

lexeme: n
token: CHAR
type: char_literal
line_num: 22

lexeme: "
token: STRING
type: string_literal
line_num: 22

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 22

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 22

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 23

lexeme: if
token: CHAR
type: char_literal
line_num: 25

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 25

lexeme: 1
token: 1
type: decimal_literal
line_num: 25

lexeme: >
token: GREATER_THAN
type: rel_op
line_num: 25

lexeme: 2
token: 2
type: decimal_literal
line_num: 25

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 25

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 25

lexeme: callout
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: printf
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ,
token: STRING
type: string_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 26

lexeme: true
token: TRUE
type: bool_literal
line_num: 26

lexeme: branch
token: CHAR
type: char_literal
line_num: 26

lexeme: is
token: CHAR
type: char_literal
line_num: 26

lexeme: bad
token: CHAR
type: char_literal
line_num: 26

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 26

lexeme: 2
token: 2
type: decimal_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: \
token: STRING
type: string_literal
line_num: 26

lexeme: n
token: CHAR
type: char_literal
line_num: 26

lexeme: "
token: STRING
type: string_literal
line_num: 26

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 26

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 26

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 27

lexeme: else
token: CHAR
type: char_literal
line_num: 27

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 27

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: /
token: DIV
type: arith_op
line_num: 28

lexeme: don
token: CHAR
type: char_literal
line_num: 28

lexeme: '
token: STRING
type: string_literal
line_num: 28

lexeme: t
token: CHAR
type: char_literal
line_num: 28

lexeme: do
token: CHAR
type: char_literal
line_num: 28

lexeme: anything
token: CHAR
type: char_literal
line_num: 28

lexeme: here
token: CHAR
type: char_literal
line_num: 28

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 29

lexeme: if
token: CHAR
type: char_literal
line_num: 31

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 31

lexeme: 1
token: 1
type: decimal_literal
line_num: 31

lexeme: <
token: LESS_THAN
type: rel_op
line_num: 31

lexeme: 2
token: 2
type: decimal_literal
line_num: 31

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 31

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 31

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: /
token: DIV
type: arith_op
line_num: 32

lexeme: don
token: CHAR
type: char_literal
line_num: 32

lexeme: '
token: STRING
type: string_literal
line_num: 32

lexeme: t
token: CHAR
type: char_literal
line_num: 32

lexeme: do
token: CHAR
type: char_literal
line_num: 32

lexeme: anything
token: CHAR
type: char_literal
line_num: 32

lexeme: here
token: CHAR
type: char_literal
line_num: 32

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 33

lexeme: else
token: CHAR
type: char_literal
line_num: 33

lexeme: {
token: BRACE_L
type: decaf_grammar
line_num: 33

lexeme: callout
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: printf
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ,
token: STRING
type: string_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: ERROR
token: CHAR
type: char_literal
line_num: 34

lexeme: else
token: CHAR
type: char_literal
line_num: 34

lexeme: branch
token: CHAR
type: char_literal
line_num: 34

lexeme: is
token: CHAR
type: char_literal
line_num: 34

lexeme: bad
token: CHAR
type: char_literal
line_num: 34

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 34

lexeme: 2
token: 2
type: decimal_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: \
token: STRING
type: string_literal
line_num: 34

lexeme: n
token: CHAR
type: char_literal
line_num: 34

lexeme: "
token: STRING
type: string_literal
line_num: 34

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 34

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 34

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 35

lexeme: callout
token: CHAR
type: char_literal
line_num: 37

lexeme: (
token: PARENTHESIS_L
type: decaf_grammar
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: printf
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: ,
token: STRING
type: string_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: control
token: CHAR
type: char_literal
line_num: 37

lexeme: flow
token: CHAR
type: char_literal
line_num: 37

lexeme: OK
token: CHAR
type: char_literal
line_num: 37

lexeme: if
token: CHAR
type: char_literal
line_num: 37

lexeme: no
token: CHAR
type: char_literal
line_num: 37

lexeme: previous
token: CHAR
type: char_literal
line_num: 37

lexeme: output
token: CHAR
type: char_literal
line_num: 37

lexeme: \
token: STRING
type: string_literal
line_num: 37

lexeme: n
token: CHAR
type: char_literal
line_num: 37

lexeme: "
token: STRING
type: string_literal
line_num: 37

lexeme: )
token: PARENTHESIS_R
type: decaf_grammar
line_num: 37

lexeme: ;
token: SEMICOLON
type: decaf_grammar
line_num: 37

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 38

lexeme: }
token: BRACE_R
type: decaf_grammar
line_num: 40